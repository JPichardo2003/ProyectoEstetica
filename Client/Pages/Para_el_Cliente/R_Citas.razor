@page "/C/Registros/Citas";
@page "/C/Registros/Citas/{CitaId:int}";
@using System.Security.Claims
@inject HttpClient httpClient
@inject NotificationService notificationService;
@inject AuthenticationStateProvider autenticacionProvider
@inject NavigationManager navManager
@attribute [Authorize(Roles = "Cliente")]

<EditForm Model="citas" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card">
        <div class="card-header d-flex align-items-center">
            <img src="zyroimage.png" class="img-logo" />
            <h1>Registro Citas</h1>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-4">
                    <label>Fecha Deseada:</label>
                    <InputDate min="@DateTime.Now.AddDays(1).ToString("yyyy-MM-dd")" id="Fecha" @bind-Value="citas.Fecha" class="form-control"></InputDate>
                    <ValidationMessage For="@(() => citas.Fecha)" />
                </div>
                <div class="col-md-6">
                    <label>Comentario:</label>
                    <InputText @bind-Value="citas.Asunto" class="form-control"></InputText>
                    <ValidationMessage For="@(() => citas.Asunto)" />
                </div>
            </div>
        </div>
        @*Detalles:*@
        @*Detalle Trabajos*@
        <div class="card card-header">
            <h3>Trabajos Elegidos</h3>
        </div>
        
            
            <div class="row">
                <div class="col-md-6">
                    <label>Trabajo</label>
                    <InputSelect @bind-Value="TrabajoElegido" class="form-select">
                        <option value="0" hidden="hidden">Seleccione</option>
                        @foreach (var p in ListaTiposdeTrabajos)
                        {
                            <option value="@p.TipoDeTrabajoId">@p.Descripcion</option>
                        }
                    </InputSelect>
                </div>
                
                <div class="col-md-6">

                <label>Filtrar por nombre</label>
                <div class="input-group">
                   
                    <InputText @bind-Value="FiltroDeTrabajo" @onblur="FiltrarTrabajo" class="form-control"></InputText>
                    <button type="button" class="btn btn-success" @onclick="AgregarDetalleTrabajo"><i class="oi oi-plus" />Add</button>
                </div>
                </div>
            </div>
        <table class='table table-responsive table-striped'>
            <thead>
                <tr>
                    <th>Trabajo</th>
                    <th>Tiempo Estimado</th>
                    <th>Precio</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var detalle in citas.TiposDeTrabajos)
                {

                    <tr>
                        <td>@detalle.Descripcion</td>
                        <td>@detalle.TiempoEstimado minutos</td>
                        <td>@detalle.Precio</td>
                        <td><button type="button" class="btn btn-danger oi oi-trash" @onclick=@(() => RemoverDetalle(detalle))></button></td>
                    </tr>
                }
            </tbody>
            <tr>
                <td>Tiempo Estimado Total: @TiempoEstimado Minutos</td>
            </tr>
        </table>


        @*Detalle Producto*@
        <div class="card card-header">
            <h3>Productos utilizados</h3>
        </div>
        <div class="card-body border border-1">
            <div class="row">
                <div class="col-md-4">
                    <label>Producto</label>
                    <InputSelect @bind-Value="DetallesCitas.ProductoId" class="form-select">
                        <option value="" hidden="hidden">Seleccione</option>
                        @foreach (var p in ListaProductos)
                        {
                            <option value="@p.ProductoId">@p.Nombre</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => DetallesCitas.ProductoId)" />
                </div>
                <div class="col-md-4">
                    <label>Filtrar por nombre</label>
                    <InputText @bind-Value="FiltroDeProducto" @onblur="FiltrarProducto" class="form-control"></InputText>
                </div>
                <div class="col-md-4">
                    <label>Cantidad</label>
                    <div class="input-group">
                        <InputNumber @bind-Value="DetallesCitas.CantidadUtilizada" class="form-control"></InputNumber>
                        <button type="button" class="btn btn-success" @onclick="AgregarDetalleProducto"><i class="oi oi-plus" />Add</button>
                        <ValidationMessage For="@(() => DetallesCitas.CantidadUtilizada)" />
                    </div>
                </div>
            </div>
        </div>
       

        <table class='table table-responsive table-striped'>
            <thead>
                <tr>
                    <th>Nombre</th>
                    <th>Descripci&oacute;n</th>
                    <th>Cantidad</th>
                    <th>Precio</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var detalle in citas.CitasDetalles)
                {
                    <tr>
                        @if (detalle.ProductoId > 0)
                        {
                            var imagen = ObtenerImagen(detalle.ProductoId);
                            if (imagen != null)
                            {
                                var base64 = Convert.ToBase64String(imagen);
                                <img src="data:image/jpeg;base64,@base64" alt="Imagen del producto" width="260px" height="160px" />
                            }
                            else
                            {
                                <p>No hay imagen disponible para este producto.</p>
                            }
                        }
                        <td>@ObtenerNombre(detalle.ProductoId)</td>
                        <td>@ObtenerDescripción(detalle.ProductoId)</td>
                        <td>@detalle.CantidadUtilizada</td>
                        <td>@ObtenerPrecio(detalle.ProductoId)$</td>
                        <td><button type="button" class="btn btn-danger oi oi-trash" @onclick=@(() => RemoverDetalle(detalle))></button></td>
                    </tr>
                }
                <tr>
                    <td>Monto Total:$ @MontoT </td>
                </tr>
            </tbody>
        </table>

        <div class="card-footer text-center">
            <button type="button" class="btn btn-primary" @onclick="Nuevo">Nuevo <i class="oi oi-file" /></button>
            <button class="btn btn-success">Guardar <i class="oi oi-document" /></button>
            <button type="button" class="btn btn-danger" @onclick="Eliminar">Eliminar <i class="oi oi-trash" /></button>
        </div>
    </div>
</EditForm>

@code
{
    [Parameter]

    public int CitaId { get; set; }
    public Citas citas { get; set; } = new Citas();
    public DateTime Hora { get; set; } = DateTime.Now;
    public CitasDetalles DetallesCitas { get; set; } = new CitasDetalles();
    public TiposDeTrabajos DetallesTrabajo { get; set; } = new TiposDeTrabajos();
    public List<Productos> ListaProductos { get; set; } = new List<Productos>();
    public List<CitasDetalles> DetallesRemovidosProducto { get; set; } = new List<CitasDetalles>();
    public List<CitasDetalles> ListaDetalles { get; set; } = new List<CitasDetalles>();

    public List<TiposDeTrabajos> ListaTiposdeTrabajos { get; set; } = new List<TiposDeTrabajos>();
    public List<TiposDeTrabajos> DetallesRemovidosTrabajo { get; set; } = new List<TiposDeTrabajos>();
    public List<Colaboradores> ListaColaboradores { get; set; } = new List<Colaboradores>();
    public int TrabajoElegido { get; set; } = 0;

    public string FiltroDeTrabajo { get; set; } = "";
    public string FiltroDeProducto { get; set; } = "";
    public float MontoT { get; set; } = 0;
    public int TiempoEstimado { get; set; } = 0;
    public bool idVacio;
    public bool cantidadCero;

    AuthenticationState usuario;
    Clientes cliente = new Clientes();

    protected override async Task OnInitializedAsync()
    {
        var productos = await httpClient.GetFromJsonAsync<List<Productos>>("api/Productos");
        await getUsuario();
        await getCliente();
        await CargarTrabajos();
        await CargarColaboradores();
        citas.ClienteId = cliente.ClienteId;
        Hora = DateTime.MinValue;
        if (productos is not null)
        {
            ListaProductos = productos;
        }
        if (CitaId > 0)
        {
            this.citas.CitaId = CitaId;
            Hora = citas.Fecha;

            await Buscar();
        }
    }

    private async Task<Citas> BuscarEntrada(int CitaId)
    {
        Citas Citas = new Citas();
        var entradaEncontrada = await httpClient.GetFromJsonAsync<Citas>($"api/Citas/{CitaId}");
        if (entradaEncontrada != null)
            return Citas = entradaEncontrada;
        return new Citas();
    }

    public byte[] ObtenerImagen(int productoId)
    {
        var producto = ListaProductos.FirstOrDefault(p => p.ProductoId == productoId);

        return producto?.Imagen!;
    }


    public string ObtenerDescripción(int Id)
    {
        return ListaProductos.Where(p => p.ProductoId == Id).FirstOrDefault()!.Descripción!;
    }

    public string ObtenerNombre(int Id)
    {
        return ListaProductos.Where(p => p.ProductoId == Id).FirstOrDefault()!.Nombre!;
    }

    public float ObtenerPrecio(int Id)
    {
        return ListaProductos.Where(p => p.ProductoId == Id).FirstOrDefault()!.Precio;
    }

    public async Task Buscar()
    {
        ListaDetalles = new List<CitasDetalles>();
        DetallesRemovidosProducto = new List<CitasDetalles>();
        var entradaIdEncontrada = (await httpClient.GetFromJsonAsync<List<Citas>>($"api/Citas"))!
        .ToList()
        .Any(e => e.CitaId == citas.CitaId);
        if (entradaIdEncontrada)
        {
            var entradaEncontrada = await httpClient.GetFromJsonAsync<Citas>($"api/Citas/{citas.CitaId}");
            if (entradaEncontrada != null)
            {
                this.citas = entradaEncontrada;
                await CalcularMonto();
                StateHasChanged();
            }
        }
        else
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "No se encontro ninguna cita",
                    Duration = 4_000
                };
            notificationService.Notify(mensaje);
            return;
        }
    }

    public async Task getUsuario()
    {
        if (autenticacionProvider == null || httpClient == null)
        {
            // Handle null cases
            return;
        }

        var autenticacionExt = (AutenticacionExtension)autenticacionProvider;
        usuario = await autenticacionExt.GetAuthenticationStateAsync();
    }

    public async Task getCliente()
    {
        if (httpClient == null || usuario == null)
        {
            // Handle null cases
            return;
        }


        var cliente = await httpClient.GetFromJsonAsync<List<Clientes>>("api/Clientes");

        var correoUsuario = usuario.User?.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email)?.Value;

        if (correoUsuario != null)
        {
            this.cliente = cliente.FirstOrDefault(c => c.Email == correoUsuario);
        }

    }


    public async Task getTiposdeTrabajos()
    {
        var tiposdeTrabajos = await httpClient.GetFromJsonAsync<List<TiposDeTrabajos>>("api/TiposdeTrabajos");
        if (tiposdeTrabajos is not null)
        {
            ListaTiposdeTrabajos = tiposdeTrabajos;
        }
    }
    public bool ValidarGuardar()
    {
        getCliente();
        if (cliente.Baneado == true)
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Baneado",
                    Detail = "Comunicarse con el local su cuenta a sido baneada.",
                    Duration = 4_000
                };
            notificationService.Notify(mensaje);
            return false;
        }
        if (ListaTiposdeTrabajos.Count == 0)
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "No se puede guardar una cita sin el trabajo que desea hacer.",
                    Duration = 4000
                };
            notificationService.Notify(mensaje);
            return false;
        }
        if (citas.Fecha < DateTime.Now.AddDays(1))
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "No se puede guardar una cita con menos de 24 horas de anticipacion.",
                    Duration = 4000
                };
            notificationService.Notify(mensaje);
            return false;
        }
        DateTime.MinValue.AddHours(8);
        if (string.IsNullOrEmpty(citas.Asunto))
        {
            citas.Asunto = "Sin Comentario";
        }
        return true;
    }

    public async Task Guardar()
    {
        FiltroDeTrabajo = "";
        await FiltrarTrabajo();
        citas.Monto = MontoT;
        citas.ClienteId = cliente.ClienteId;

        if (!ValidarGuardar())
        {
            return;
        }

        // Verificar la disponibilidad de colaboradores antes de agregar la cita
        if (await VerificarDisponibilidadColaboradores())
        {
            // Asignar las citas a los colaboradores
            await AsignarCitas();

            // Agregar la cita al cliente (puedes realizar ajustes según tu modelo de datos)
            var response = await httpClient.PostAsJsonAsync("api/Citas", citas);

            if (!response.IsSuccessStatusCode)
            {
                // Manejar errores al agregar la cita
                var mensaje = new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Error",
                        Detail = "No se pudo Guardar correctamente, verifique los campos",
                        Duration = 4_000
                    };
                notificationService.Notify(mensaje);
                return;
            }

            // Cita agregada correctamente
            var CitaDevuelta = await response.Content.ReadFromJsonAsync<Citas>();
            if (CitaDevuelta is not null)
            {
                var mensaje = new NotificationMessage
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = "Éxito",
                        Detail = "Cita Guardada Correctamente",
                        Duration = 4_000
                    };
                notificationService.Notify(mensaje);

                // Restablecer el estado y otros valores después de guardar la cita
                citas = CitaDevuelta;
                Nuevo();
                StateHasChanged();
            }
        }
        else
        {
            // Notificar al usuario si no hay colaboradores disponibles
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "No hay colaboradores disponibles para las horas seleccionadas",
                    Duration = 4_000
                };
            notificationService.Notify(mensaje);
        }
    }

   



    public void Nuevo()
    {
        this.citas = new Citas();
        this.DetallesCitas = new CitasDetalles();
        DetallesRemovidosProducto = new List<CitasDetalles>();
        ListaDetalles = new List<CitasDetalles>();
        MontoT = 0;
    }

    public async Task Eliminar()
    {
        var detallesEliminados = new List<CitasDetalles>(citas.CitasDetalles);
        using var response = await httpClient.DeleteAsync($"api/Citas/{citas.CitaId}");
        if (!response.IsSuccessStatusCode)
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "La cita no fue Eliminada Correctamente",
                    Duration = 4_000
                };
            notificationService.Notify(mensaje);
            return;
        }
        else
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Éxito",
                    Detail = "cita Eliminada Correctamente",
                    Duration = 4_000
                };
            notificationService.Notify(mensaje);

            foreach (var detalle in detallesEliminados)
            {
                var productos = ListaProductos.FirstOrDefault(p => p.ProductoId == detalle.ProductoId);
                if (productos != null)
                {
                    productos.Existencia += detalle.CantidadUtilizada;
                    await httpClient.PutAsJsonAsync<Productos>($"api/Productos/{productos.ProductoId}", productos);
                }
            }


        }
        Nuevo();
    }

    public bool Validar()
    {
        idVacio = (DetallesCitas.ProductoId <= 0);
        cantidadCero = (DetallesCitas.CantidadUtilizada <= 0);
        return idVacio || cantidadCero;
    }

    public async Task AgregarDetalleProducto()
    {
        if (Validar())
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "Llene los campos del detalle Correctamente",
                    Duration = 4_000
                };
            notificationService.Notify(mensaje);
            return;
        }
        var producto = await BuscarProductos(DetallesCitas.ProductoId);
        if (producto != null)
        {
            if (DetallesCitas.CantidadUtilizada > producto.Existencia)
            {
                var mensaje = new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Error",
                        Detail = $"No hay suficiente cantidad de {producto.Descripción} en el inventario ({producto.Existencia})",
                        Duration = 4_000
                    };
                notificationService.Notify(mensaje);
                return;
            }
        }

        if (citas != null)
        {
            DetallesCitas.CitaId = citas.CitaId;
            citas.CitasDetalles.Add(DetallesCitas);
            ListaDetalles.Add(DetallesCitas);
            if (DetallesRemovidosProducto.Any(d => d.DetalleId == DetallesCitas.DetalleId))
                DetallesRemovidosProducto.Remove(DetallesCitas);
            DetallesCitas = new CitasDetalles();
            CalcularMonto();

        }
        StateHasChanged();
    }


    public void RemoverDetalle(CitasDetalles detalle)
    {
        DetallesCitas = detalle;
        citas.CitasDetalles.Remove(detalle);
        DetallesRemovidosProducto.Add(detalle);
        if (ListaDetalles.Any(d => d.DetalleId == detalle.DetalleId))
            ListaDetalles.Remove(detalle);
        CalcularMonto();
        StateHasChanged();
    }
    //Con una sobrecarga de metodos se hace lo mismo que con el de arriba
    public async void RemoverDetalle(TiposDeTrabajos detalle)
    {
        TrabajoElegido = detalle.TipoDeTrabajoId;
        citas.TiposDeTrabajos.Remove(detalle);
        DetallesRemovidosTrabajo.Add(detalle);
        TiempoEstimado = citas.TiposDeTrabajos.Sum(e => e.TiempoEstimado);
        if (DetallesRemovidosTrabajo.Any(d => d.TipoDeTrabajoId == detalle.TipoDeTrabajoId))
            DetallesRemovidosTrabajo.Remove(detalle);
        await CalcularMonto();
        StateHasChanged();
    }


    public async Task AgregarDetalleTrabajo()
    {
        var ListaTiposdeTrabajosCompleta = await httpClient.GetFromJsonAsync<List<TiposDeTrabajos>>("api/TiposDeTrabajos");
        var Trabajo = ListaTiposdeTrabajosCompleta.FirstOrDefault(t => t.TipoDeTrabajoId == TrabajoElegido);
        if(citas.TiposDeTrabajos.Count==1)
        {
            NotificationMessage mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "Solo se puede agregar un trabajo por cita",
                    Duration = 4_000
                };
                notificationService.Notify(mensaje);
                return;
        }
        if(ValidarAgregarDetalleTrabajo())
        {
            citas.TiposDeTrabajos.Add(Trabajo);
            TrabajoElegido = Trabajo.TipoDeTrabajoId;
            ListaTiposdeTrabajos.Remove(Trabajo);
            if (DetallesRemovidosTrabajo.Any(d => d.TipoDeTrabajoId == Trabajo.TipoDeTrabajoId))
                DetallesRemovidosTrabajo.Remove(Trabajo);
            await CalcularMonto();
            StateHasChanged();
        }
    }

    public bool ValidarAgregarDetalleTrabajo()
    {
        if (TrabajoElegido<= 0)
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "Seleccione el trabajo que desea agregar.",
                    Duration = 4_000
                };
            notificationService.Notify(mensaje);
            return false;
        }
        if (citas.TiposDeTrabajos.Any(d => d.TipoDeTrabajoId == TrabajoElegido))
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "Ya se ha agregado este trabajo anterormente",
                    Duration = 4_000
                };
            notificationService.Notify(mensaje);
            return false;
        }
        if (citas.TiposDeTrabajos.Any(d => d.TipoDeTrabajoId == TrabajoElegido))
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "Ya se ha agregado este trabajo anterormente",
                    Duration = 4_000
                };
            notificationService.Notify(mensaje);
            return false;
        }
        return true;
    }

    private async Task<Productos> BuscarProductos(int ProductoId)
    {
        var producto = await httpClient.GetFromJsonAsync<Productos>($"api/Productos/{ProductoId}");

        return producto ?? new Productos();
    }

    public async Task CargarTrabajos()
    {
        var trabajos = await httpClient.GetFromJsonAsync<List<TiposDeTrabajos>>("api/TiposDeTrabajos");
        if (trabajos is not null)
        {
            ListaTiposdeTrabajos = trabajos;
        }
    }
    public async Task CargarColaboradores()
    {
        var colaboradores = await httpClient.GetFromJsonAsync<List<Colaboradores>>("api/Colaboradores");
        if (colaboradores is not null)
        {
            ListaColaboradores = colaboradores;
        }
    }
    public async Task FiltrarTrabajo()
    {
        var trabajos = await httpClient.GetFromJsonAsync<List<TiposDeTrabajos>>("api/TiposDeTrabajos");
        if (trabajos is not null)
        {
            ListaTiposdeTrabajos = trabajos.Where(t => t.Descripcion.ToLower().Contains(FiltroDeTrabajo.ToLower())).ToList();
        }
    }

    public async Task FiltrarProducto()
    {
        var productos = await httpClient.GetFromJsonAsync<List<Productos>>("api/Productos");
        if (productos is not null)
        {
            ListaProductos = productos.Where(p => p.Nombre.ToLower().Contains(FiltroDeProducto.ToLower())).ToList();
        }
    }

    public Task CalcularMonto()
    { 
        MontoT = citas.CitasDetalles.Sum(e => @ObtenerPrecio(e.ProductoId) * e.CantidadUtilizada) + citas.TiposDeTrabajos.Sum(T => T.Precio);

        return Task.CompletedTask;
    }

    // En el método Guardar(), reemplaza la llamada a VerificarDisponibilidadColaboradores() con la siguiente lógica:
    private async Task<bool> VerificarDisponibilidadColaboradores()
    {
        var Trabajo = citas.TiposDeTrabajos.FirstOrDefault();

        // Verificar la disponibilidad de colaboradores para cada tipo de trabajo
        var colaboradorDisponible = ObtenerColaboradorDisponible(ListaColaboradores, Trabajo, citas.Fecha);

        if (colaboradorDisponible == null)
        {
            return false; // Devolver falso si no hay colaboradores disponibles
        }
        else
        {
            // Asignar colaborador y ajustar la fecha de la cita
            citas.ColaboradorId = colaboradorDisponible.ColaboradorId;
            await AsignarCitas(); // Agregar la cita al colaborador
        }

        return true; // Todos los colaboradores están disponibles
    }

    // Modifica el método ObtenerColaboradorDisponible():
    private Colaboradores ObtenerColaboradorDisponible(List<Colaboradores> colaboradores, TiposDeTrabajos trabajo, DateTime fecha)
    {
        var horaInicio = fecha.Date.AddHours(8); // Inicio de la jornada laboral
        // Recorrer la hora en intervalos de 20 minutos
        for (int i = 0; i < 9 * 3; i++) // 9 horas * 3 (intervalos de 20 minutos)
        {


            foreach (var colaborador in colaboradores)
            {
                // Verificar si el colaborador puede realizar el tipo de trabajo
                if (colaborador.TipoDeTrabajo.Any(t => t.TipoDeTrabajoId == trabajo.TipoDeTrabajoId))
                {
                    // Verificar si el colaborador no tiene citas en la misma franja horaria
                    if (!colaborador.Citas.Any(c => c.Fecha >= horaInicio && c.Fecha <= horaInicio.AddMinutes(trabajo.TiempoEstimado)))
                    {
                        // El colaborador está disponible en la franja horaria seleccionada
                        return colaborador;
                    }
                }
            }
            horaInicio.AddMinutes(20);
        }

        return null; // Si no se encuentra ningún colaborador disponible
    }

    public async Task AsignarCitas()
    {
        var colaborador = await httpClient.GetFromJsonAsync<Colaboradores>($"api/Colaboradores/{citas.ColaboradorId}");
        colaborador.Citas.Add(citas);
        await httpClient.PutAsJsonAsync<Colaboradores>($"api/Colaboradores/{citas.ColaboradorId}", colaborador);
    }


}
