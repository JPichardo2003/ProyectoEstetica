@page "/customiazar";
@page "/customizar/{editarId:int}";
@using System.Security.Claims
@inject HttpClient httpClient
@inject NotificationService notificationService;
@inject AuthenticationStateProvider autenticacionProvider
@inject NavigationManager navManager
@attribute [Authorize(Roles = "Cliente, Administrador")]

<EditForm Model="cliente" OnValidSubmit="Modificar">
	<DataAnnotationsValidator />

	<div class="card">
		<div class="card-header d-flex align-items-center">
			<img src="zyroimage.png" class="img-logo" />
			<h1>Editar Perfil</h1>
		</div>
		<div class="card-body">

			 <AuthorizeView Roles="Administrador" Context="Admin">
				 <Authorized>
					<label>ID:</label>
					<div class="input-group">
						<InputNumber @bind-Value="cliente.ClienteId" class="id-input"></InputNumber>
						<button type="button" class="btn btn-outline-primary oi oi-magnifying-glass" @onclick="Buscar"></button>
					</div>
				 </Authorized>
			 </AuthorizeView>

			<div class="row">
				<AuthorizeView Roles="Administrador" Context="Admin">
					<Authorized>
				<div class="col-md-6">
					<label>Nombre:</label>
					<InputText @bind-Value="cliente.Nombre" class="form-control"></InputText>
					<ValidationMessage For="@(() => cliente.Nombre)" />
				</div>
				<div class="col-md-6">
					<label>Apellido:</label>
					<InputText @bind-Value="cliente.Apellido" class="form-control"></InputText>
					<ValidationMessage For="@(() => cliente.Apellido)" />
				</div>
				
				
						<div class="col-md-6">
							<label>Email:</label>
							<InputText @bind-Value="cliente.Email" class="form-control"></InputText>
							<ValidationMessage For="@(() => cliente.Email)" />
						</div>
					</Authorized>
				</AuthorizeView>
				<AuthorizeView Roles="Cliente" Context="Cli">
					<Authorized>
						<div class="col-md-6">
							<label>Nombre:</label>
							<h5>@cliente.Nombre</h5>
						</div>
					</Authorized>
				</AuthorizeView>
				<AuthorizeView Roles="Cliente" Context="Cli">
					<Authorized>
						<div class="col-md-6">
							<label>Apellido:</label>
							<h5>@cliente.Apellido</h5>
						</div>
					</Authorized>
				</AuthorizeView>
				<AuthorizeView Roles="Cliente" Context="Cli">
					<Authorized>
						<div class="col-md-6">
							<label>Email:</label>
							<h5>@cliente.Email</h5>
						</div>
					</Authorized>
				</AuthorizeView>
				
				<div class="col-md-6">
                        <label>Contraseña:</label>
                        <InputText type="password" @bind-Value="cliente.Clave" class="form-control"></InputText>
                        <ValidationMessage For="@(() => cliente.Clave)" />
                </div>
              
				<div class="col-md-6">
					<label>Tel&eacute;fono:</label>
					<InputText @bind-Value="cliente.Teléfono" class="form-control" maxlength></InputText>
					<ValidationMessage For="@(() => cliente.Teléfono)" />
				</div>
			</div>
		</div>
		<div class="card-footer">
			<AuthorizeView Roles="Administrador" Context="Admin">
				<Authorized>
			<button type="button" class="btn btn-outline-primary" @onclick="Nuevo">Nuevo <i class="oi oi-file" /></button>
				</Authorized>
			</AuthorizeView>
			<button type="submit" class="btn btn-outline-warning">Modificar <i class="oi oi-pencil" /></button>
			<AuthorizeView Roles="Administrador">
				<Authorized Context="Admin">
					<button type="button" class="btn btn-outline-danger" @onclick="Eliminar">Eliminar <i class="oi oi-trash" /></button>
				</Authorized>
			</AuthorizeView>
		</div>
	</div>
</EditForm>


@code
{
	[Parameter]

	public int editarId { get; set; }

	public Clientes cliente { get; set; } = new Clientes();
	AuthenticationState usuario;
	bool VerContraseña = false;

	protected override async Task OnInitializedAsync()
	{
		await getUsuario();
		await getCliente();
		if (editarId > 0)
		{
			this.cliente.ClienteId = editarId;
			await Buscar();
		}

	}

	public async Task getUsuario()
	{
		if (autenticacionProvider == null || httpClient == null)
		{
			// Handle null cases
			return;
		}

		var autenticacionExt = (AutenticacionExtension)autenticacionProvider;
		usuario = await autenticacionExt.GetAuthenticationStateAsync();
	}

	public async Task getCliente()
	{
		if (httpClient == null || usuario == null)
		{
			// Handle null cases
			return;
		}


		var cliente = await httpClient.GetFromJsonAsync<List<Clientes>>("api/Clientes");

		var correoUsuario = usuario.User?.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email)?.Value;

		if (correoUsuario != null)
		{
			this.cliente = cliente.FirstOrDefault(c => c.Email == correoUsuario);
		}

	}



	public async Task Buscar()
	{
		var productoIdEncontrado = (await httpClient.GetFromJsonAsync<List<Clientes>>($"api/Clientes"))!
		.ToList()
		.Any(c => c.ClienteId == cliente.ClienteId);
		if (productoIdEncontrado)
		{
			var productoEncontrado = await httpClient.GetFromJsonAsync<Clientes>($"api/Clientes/{cliente.ClienteId}");
			if (productoEncontrado != null)
			{
				this.cliente = productoEncontrado;
				StateHasChanged();
			}
		}
		else
		{
			var mensaje = new NotificationMessage
				{
					Severity = NotificationSeverity.Error,
					Summary = "Error",
					Detail = "No se encontro ningun producto",
					Duration = 4_000
				};
			notificationService.Notify(mensaje);
			return;
		}
	}

	public async Task Modificar()
	{
		using var response = await httpClient.PostAsJsonAsync("api/Clientes/Mody", cliente);
		if (response.IsSuccessStatusCode)
		{
			var mensaje = new NotificationMessage
				{
					Severity = NotificationSeverity.Success,
					Summary = "Exito!",
					Detail = "Se modificio correctamente",
					Duration = 4_000
				};
			notificationService.Notify(mensaje);
			Nuevo();
			await Buscar();
		}
		else
		{
			var mensaje = new NotificationMessage
				{
					Severity = NotificationSeverity.Error,
					Summary = "Error!",
					Detail = "No se pude modificar",
					Duration = 4_000
				};
			notificationService.Notify(mensaje);
			return;
		}
	}

	public void Nuevo()
	{
		this.cliente = new Clientes();
		getCliente();
	}

	public async Task Eliminar()
	{
		using var response = await httpClient.DeleteAsync($"api/Clientes/{cliente.ClienteId}");
		if (!response.IsSuccessStatusCode)
		{
			var mensaje = new NotificationMessage
				{
					Severity = NotificationSeverity.Error,
					Summary = "Error",
					Detail = "No es posible Eliminar",
					Duration = 4_000
				};
			notificationService.Notify(mensaje);
			return;
		}
		else
		{
			var mensaje = new NotificationMessage
				{
					Severity = NotificationSeverity.Success,
					Summary = "Éxito",
					Detail = "producto Eliminado Correctamente",
					Duration = 4_000
				};
			notificationService.Notify(mensaje);

		}
		Nuevo();
	}

	public async Task CambiarVerContraseña()
    {
        if (VerContraseña == false)
        {
            VerContraseña = true;
        }
        else
        {
            VerContraseña = false;
        }
    }
}
