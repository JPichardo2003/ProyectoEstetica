@page "/Consultar/Admins";
@inject HttpClient httpClient
@attribute [Authorize(Roles = "Administrador")]
<PageTitle>Consulta de Administradores</PageTitle>
<div class="card">
<div class="card-header d-flex align-items-center">
    <img src="zyroimage.png" class="img-logo" />
    <h1>Consulta de Administradores</h1>
</div>
<div class="card-body row">
    <div class="row">
        <div class="col-md-3 ">
             <label>Filtrar ID:</label>
            <InputNumber @bind-Value="Filtro" class="form-control"></InputNumber>
        </div>

        <div class="col-md-3 ">
             <label>Filtrar Nombre:</label>
            <InputText @bind-Value="Nombre" class="form-control"></InputText>
        </div>
              
        <div class="col-md-3 ">
            <br />
            <button type="button" class="btn btn-outline-primary oi oi-magnifying-glass" @onclick="Buscar"></button>
        </div>
    </div>


@if (Admins is not null)
{
    <div class="table-responsive">
        <table class="table table-striped table-bordered">
            <thead>
                <tr>
                    <th>Admin ID</th>
                    <th>Nombre</th>
                    <th>Apellido</th>
                    <th>Email</th>
                    <th>Editar</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var Admins in Admins)
                {
                    <tr>
                        <td>@Admins.AdminId</td>
                        <td>@Admins.Nombre</td>
                        <td>@Admins.Apellido</td>
                        <td>@Admins.Email</td>
                        <td><a href="Registros/Admins/@Admins.AdminId"><i class="oi oi-pencil"></i></a></td>
                    </tr>
                }
                <tr>
                    <td>Conteo: @Conteo</td>
                </tr>
            </tbody>
        </table>
    </div>
}
</div>
</div>
@code {

    public int Filtro { get; set; }
    public List<Admins>? Admins { get; set; }
    public Admins? admin { get; set; } = new Admins();
    public int Conteo { get; set; }
    public string? Nombre { get; set;}

    protected override async Task OnInitializedAsync()
    {
        await Buscar();
    }

    public async Task Buscar()
    {
        var listaAdmins = await httpClient.GetFromJsonAsync<List<Admins>>($"api/Admins");
        Admins = listaAdmins?
                            .Where(x => (x.AdminId == Filtro || Filtro == 0) &&
                                        (string.IsNullOrEmpty(Nombre) || (x.Nombre != null && x.Nombre.ToLower().Contains(Nombre.ToLower()))))
                            .ToList();

        Conteo = Admins != null ? Admins!.Count() : 0;
        StateHasChanged();
    }


}